// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moby/buildkit/frontend/gateway/client (interfaces: Client,Reference)

// Package cib_mock is a generated GoMock package.
package cib_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	llb "github.com/moby/buildkit/client/llb"
	client "github.com/moby/buildkit/frontend/gateway/client"
	digest "github.com/opencontainers/go-digest"
	types "github.com/tonistiigi/fsutil/types"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BuildOpts mocks base method
func (m *MockClient) BuildOpts() client.BuildOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOpts")
	ret0, _ := ret[0].(client.BuildOpts)
	return ret0
}

// BuildOpts indicates an expected call of BuildOpts
func (mr *MockClientMockRecorder) BuildOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOpts", reflect.TypeOf((*MockClient)(nil).BuildOpts))
}

// Inputs mocks base method
func (m *MockClient) Inputs(arg0 context.Context) (map[string]llb.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inputs", arg0)
	ret0, _ := ret[0].(map[string]llb.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inputs indicates an expected call of Inputs
func (mr *MockClientMockRecorder) Inputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inputs", reflect.TypeOf((*MockClient)(nil).Inputs), arg0)
}

// NewContainer mocks base method
func (m *MockClient) NewContainer(arg0 context.Context, arg1 client.NewContainerRequest) (client.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContainer", arg0, arg1)
	ret0, _ := ret[0].(client.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer
func (mr *MockClientMockRecorder) NewContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockClient)(nil).NewContainer), arg0, arg1)
}

// ResolveImageConfig mocks base method
func (m *MockClient) ResolveImageConfig(arg0 context.Context, arg1 string, arg2 llb.ResolveImageConfigOpt) (digest.Digest, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveImageConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(digest.Digest)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveImageConfig indicates an expected call of ResolveImageConfig
func (mr *MockClientMockRecorder) ResolveImageConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveImageConfig", reflect.TypeOf((*MockClient)(nil).ResolveImageConfig), arg0, arg1, arg2)
}

// Solve mocks base method
func (m *MockClient) Solve(arg0 context.Context, arg1 client.SolveRequest) (*client.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve", arg0, arg1)
	ret0, _ := ret[0].(*client.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve
func (mr *MockClientMockRecorder) Solve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*MockClient)(nil).Solve), arg0, arg1)
}

// MockReference is a mock of Reference interface
type MockReference struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceMockRecorder
}

// MockReferenceMockRecorder is the mock recorder for MockReference
type MockReferenceMockRecorder struct {
	mock *MockReference
}

// NewMockReference creates a new mock instance
func NewMockReference(ctrl *gomock.Controller) *MockReference {
	mock := &MockReference{ctrl: ctrl}
	mock.recorder = &MockReferenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReference) EXPECT() *MockReferenceMockRecorder {
	return m.recorder
}

// ReadDir mocks base method
func (m *MockReference) ReadDir(arg0 context.Context, arg1 client.ReadDirRequest) ([]*types.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", arg0, arg1)
	ret0, _ := ret[0].([]*types.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir
func (mr *MockReferenceMockRecorder) ReadDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockReference)(nil).ReadDir), arg0, arg1)
}

// ReadFile mocks base method
func (m *MockReference) ReadFile(arg0 context.Context, arg1 client.ReadRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockReferenceMockRecorder) ReadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockReference)(nil).ReadFile), arg0, arg1)
}

// StatFile mocks base method
func (m *MockReference) StatFile(arg0 context.Context, arg1 client.StatRequest) (*types.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatFile", arg0, arg1)
	ret0, _ := ret[0].(*types.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatFile indicates an expected call of StatFile
func (mr *MockReferenceMockRecorder) StatFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatFile", reflect.TypeOf((*MockReference)(nil).StatFile), arg0, arg1)
}

// ToState mocks base method
func (m *MockReference) ToState() (llb.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToState")
	ret0, _ := ret[0].(llb.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToState indicates an expected call of ToState
func (mr *MockReferenceMockRecorder) ToState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToState", reflect.TypeOf((*MockReference)(nil).ToState))
}
