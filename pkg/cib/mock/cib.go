// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EricHripko/buildkit-fdk/pkg/cib (interfaces: Service)

// Package cib_mock is a generated GoMock package.
package cib_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	llb "github.com/moby/buildkit/client/llb"
	dockerfile2llb "github.com/moby/buildkit/frontend/dockerfile/dockerfile2llb"
	client "github.com/moby/buildkit/frontend/gateway/client"
	apicaps "github.com/moby/buildkit/util/apicaps"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchImageConfig mocks base method
func (m *MockService) FetchImageConfig(arg0 string, arg1 *v1.Platform) (dockerfile2llb.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchImageConfig", arg0, arg1)
	ret0, _ := ret[0].(dockerfile2llb.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchImageConfig indicates an expected call of FetchImageConfig
func (mr *MockServiceMockRecorder) FetchImageConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImageConfig", reflect.TypeOf((*MockService)(nil).FetchImageConfig), arg0, arg1)
}

// From mocks base method
func (m *MockService) From(arg0 string, arg1 *v1.Platform, arg2 string) (llb.State, *dockerfile2llb.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From", arg0, arg1, arg2)
	ret0, _ := ret[0].(llb.State)
	ret1, _ := ret[1].(*dockerfile2llb.Image)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// From indicates an expected call of From
func (mr *MockServiceMockRecorder) From(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockService)(nil).From), arg0, arg1, arg2)
}

// GetBuildArgs mocks base method
func (m *MockService) GetBuildArgs() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildArgs")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetBuildArgs indicates an expected call of GetBuildArgs
func (mr *MockServiceMockRecorder) GetBuildArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildArgs", reflect.TypeOf((*MockService)(nil).GetBuildArgs))
}

// GetBuildPlatform mocks base method
func (m *MockService) GetBuildPlatform() *v1.Platform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildPlatform")
	ret0, _ := ret[0].(*v1.Platform)
	return ret0
}

// GetBuildPlatform indicates an expected call of GetBuildPlatform
func (mr *MockServiceMockRecorder) GetBuildPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildPlatform", reflect.TypeOf((*MockService)(nil).GetBuildPlatform))
}

// GetCaps mocks base method
func (m *MockService) GetCaps() apicaps.CapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaps")
	ret0, _ := ret[0].(apicaps.CapSet)
	return ret0
}

// GetCaps indicates an expected call of GetCaps
func (mr *MockServiceMockRecorder) GetCaps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaps", reflect.TypeOf((*MockService)(nil).GetCaps))
}

// GetExcludes mocks base method
func (m *MockService) GetExcludes() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExcludes")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExcludes indicates an expected call of GetExcludes
func (mr *MockServiceMockRecorder) GetExcludes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExcludes", reflect.TypeOf((*MockService)(nil).GetExcludes))
}

// GetIgnoreCache mocks base method
func (m *MockService) GetIgnoreCache() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIgnoreCache")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIgnoreCache indicates an expected call of GetIgnoreCache
func (mr *MockServiceMockRecorder) GetIgnoreCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIgnoreCache", reflect.TypeOf((*MockService)(nil).GetIgnoreCache))
}

// GetMarshalOpts mocks base method
func (m *MockService) GetMarshalOpts() []llb.ConstraintsOpt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarshalOpts")
	ret0, _ := ret[0].([]llb.ConstraintsOpt)
	return ret0
}

// GetMarshalOpts indicates an expected call of GetMarshalOpts
func (mr *MockServiceMockRecorder) GetMarshalOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarshalOpts", reflect.TypeOf((*MockService)(nil).GetMarshalOpts))
}

// GetMetadata mocks base method
func (m *MockService) GetMetadata() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockServiceMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockService)(nil).GetMetadata))
}

// GetMetadataFileName mocks base method
func (m *MockService) GetMetadataFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetadataFileName indicates an expected call of GetMetadataFileName
func (mr *MockServiceMockRecorder) GetMetadataFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataFileName", reflect.TypeOf((*MockService)(nil).GetMetadataFileName))
}

// GetOpts mocks base method
func (m *MockService) GetOpts() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpts")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetOpts indicates an expected call of GetOpts
func (mr *MockServiceMockRecorder) GetOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpts", reflect.TypeOf((*MockService)(nil).GetOpts))
}

// GetResolveMode mocks base method
func (m *MockService) GetResolveMode() (llb.ResolveMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolveMode")
	ret0, _ := ret[0].(llb.ResolveMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolveMode indicates an expected call of GetResolveMode
func (mr *MockServiceMockRecorder) GetResolveMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolveMode", reflect.TypeOf((*MockService)(nil).GetResolveMode))
}

// GetTargetPlatforms mocks base method
func (m *MockService) GetTargetPlatforms() ([]*v1.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetPlatforms")
	ret0, _ := ret[0].([]*v1.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetPlatforms indicates an expected call of GetTargetPlatforms
func (mr *MockServiceMockRecorder) GetTargetPlatforms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetPlatforms", reflect.TypeOf((*MockService)(nil).GetTargetPlatforms))
}

// Solve mocks base method
func (m *MockService) Solve(arg0 context.Context, arg1 llb.State) (client.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve", arg0, arg1)
	ret0, _ := ret[0].(client.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve
func (mr *MockServiceMockRecorder) Solve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*MockService)(nil).Solve), arg0, arg1)
}

// Src mocks base method
func (m *MockService) Src() (client.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Src")
	ret0, _ := ret[0].(client.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Src indicates an expected call of Src
func (mr *MockServiceMockRecorder) Src() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Src", reflect.TypeOf((*MockService)(nil).Src))
}

// SrcState mocks base method
func (m *MockService) SrcState() (llb.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SrcState")
	ret0, _ := ret[0].(llb.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SrcState indicates an expected call of SrcState
func (mr *MockServiceMockRecorder) SrcState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SrcState", reflect.TypeOf((*MockService)(nil).SrcState))
}
